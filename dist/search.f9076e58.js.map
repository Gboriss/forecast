{"version":3,"sources":["src/get.js","src/render.js","src/search.js"],"names":["get","url","method","Promise","resolve","reject","xhr","XMLHttpRequest","open","send","onload","status","json","JSON","parse","response","error","console","log","onerror","event","target","render","K","sunsetP","document","getElementById","sunriseP","parsed","temp","main","innerHTML","Math","floor","description","weather","sunrise","sys","timestr","Date","getHours","minutes","sunset","hours","min","apiKey","input","autocomplete","google","maps","places","Autocomplete","types","addListener","place","getPlace","name","lat","geometry","location","lng","then"],"mappings":";AAsCeA,aArCf,SAASA,EAAIC,GAAKC,IAAAA,EAAS,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,MACnB,OAAA,IAAIC,QAAQ,SAACC,EAASC,GAExBC,IAAAA,EAAM,IAAIC,eAEdD,EAAIE,KAAKN,EAAQD,GAEjBK,EAAIG,OAEJH,EAAII,OAAS,WACTJ,GAAe,MAAfA,EAAIK,OACF,IACCC,IAAAA,EAAOC,KAAKC,MAAMR,EAAIS,UAEnBX,OAAAA,EAAQQ,GAEd,MAAOI,GACRX,IACAY,QAAQD,MAAMA,QAIfX,IACAY,QAAQC,IAAIZ,EAAIK,SAIlBL,EAAIa,QAAU,SAAAC,GAEbH,QAAQC,IAAIE,EAAMC,OAAOV,QAEzBN,OAMYL,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAAAA,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACFAsB,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAnCf,IAAIC,EAAI,OAEJC,EAAUC,SAASC,eAAe,WAClCC,EAAWF,SAASC,eAAe,YAEnCJ,EAAS,SAAAM,GACRC,IAAAA,EAAOD,EAAOE,KAAKD,KACvBJ,SAASC,eAAe,gBAAgBK,UAAeC,GAAAA,OAAAA,KAAKC,MAAMJ,EAAON,GAFnD,MAOlBW,IAAAA,EAAcN,EAAOO,QAAQ,GAAGL,KACpCL,SAASC,eAAe,eAAeK,UAAYG,EAE/CE,IAAAA,EAAUR,EAAOS,IAAID,QAErBE,EADO,IAAIC,KAAe,IAAVH,GACAI,WAGhBC,EAAUT,KAAKC,MAAQG,EAAU,IAAO,GAAM,IAClDX,SAASC,eAAe,WAAWK,UAAYO,EAAU,IAAMG,EAE/DjB,EAAQO,UAAY,SACpBJ,EAASI,UAAY,UAIjBW,IAAAA,EAASd,EAAOS,IAAIK,OAEpBC,EADY,IAAIJ,KAAc,IAATG,GACFF,WACnBI,EAAMZ,KAAKC,MAAQS,EAAS,IAAO,GAAM,IAC7CjB,SAASC,eAAe,UAAUK,UAAYY,EAAQ,IAAMC,GAG9CtB,EAAAA,EAAAA,QAAAA,QAAAA;;ACzBf,aAVA,IAAA,EAAA,EAAA,QAAA,UACA,EAAA,EAAA,QAAA,aASA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GANA,IAAIuB,EAAS,mCAETC,EAAQrB,SAASC,eAAe,gBAEhCqB,EAAe,IAAIC,OAAOC,KAAKC,OAAOC,aAAaL,EAAO,CAACM,MAAO,CAAC,cAEvEJ,OAAOC,KAAK7B,MAAMiC,YAAYN,EAAc,gBAAiB,WAExDO,IAAAA,EAAQP,EAAaQ,WACzB9B,SAASC,eAAe,QAAQK,UAAYuB,EAAME,KAI9CC,IAAAA,EAAMH,EAAMI,SAASC,SAASF,MAC9BG,EAAMN,EAAMI,SAASC,SAASC,OAIyBH,EAAAA,EAAAA,SAAAA,uDAAAA,OAAAA,EAAWG,SAAAA,OAAAA,EAAaf,WAAAA,OAAAA,IACjFgB,KAAK,SAAAjC,IAEEA,EAAAA,EAAAA,SAAAA","file":"search.f9076e58.js","sourceRoot":"..","sourcesContent":["\r\nfunction get(url, method = 'GET') {\r\n\treturn new Promise((resolve, reject) => {\r\n\r\n\t\tlet xhr = new XMLHttpRequest()\r\n\t\r\n\t\txhr.open(method, url)\r\n\r\n\t\txhr.send()\r\n\r\n\t\txhr.onload = () => {\r\n\t\t\tif(xhr.status === 200) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tlet json = JSON.parse(xhr.response)\r\n\r\n\t\t\t\t\treturn resolve(json)\r\n\t\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\treject()\r\n\t\t\t\t\tconsole.error(error);\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else {\r\n\t\t\t\treject()\r\n\t\t\t\tconsole.log(xhr.status);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\txhr.onerror = event => {\r\n\r\n\t\t\tconsole.log(event.target.status)\r\n\r\n\t\t\treject()\r\n\t\t}\r\n\t})\r\n\r\n}\r\n\r\nexport default get\r\n","\r\nlet K = 273.15\r\n\r\nlet sunsetP = document.getElementById('sunsetP')\r\nlet sunriseP = document.getElementById('sunriseP')\r\n\r\nlet render = parsed => {\r\n\tlet temp = parsed.main.temp\r\n\tdocument.getElementById('current-temp').innerHTML = `${Math.floor(temp - K)}Â°C`\r\n\t\r\n\t// let name = parsed.name\r\n\t// document.getElementById('name').innerHTML = name\r\n\t\r\n\tlet description = parsed.weather[0].main\r\n\tdocument.getElementById('description').innerHTML = description\r\n\r\n\tlet sunrise = parsed.sys.sunrise\r\n\tlet date = new Date(sunrise * 1000)\r\n\tlet timestr  = date.getHours()\r\n\r\n\t// let hours = ( (sunrise / (1000 * 60 * 60)) % 24)\r\n\tlet minutes = Math.floor( (sunrise / 1000 / 60) % 60 )\r\n\tdocument.getElementById('sunrise').innerHTML = timestr + ':' + minutes\r\n\r\n\tsunsetP.innerHTML = 'sunset'\r\n\tsunriseP.innerHTML = 'sunrise'\r\n\r\n\r\n\t\r\n\tlet sunset = parsed.sys.sunset\r\n\tlet datenight = new Date(sunset * 1000)\r\n\tlet hours  = datenight.getHours()\r\n\tlet min = Math.floor( (sunset / 1000 / 60) % 60 )\r\n\tdocument.getElementById('sunset').innerHTML = hours + ':' + min\r\n}\r\n\r\nexport default render","\r\nimport get from './get'\r\nimport render from './render'\r\n// import apiKey from './key'\r\n\r\nlet apiKey = '9a3f56db816fe284dd580a82176924f9'\r\n\r\nlet input = document.getElementById('autocomplete')\r\n\r\nlet autocomplete = new google.maps.places.Autocomplete(input, {types: ['(cities)']})\r\n\r\ngoogle.maps.event.addListener(autocomplete, 'place_changed', () => {\r\n\t\r\n\tlet place = autocomplete.getPlace()\r\n\tdocument.getElementById('name').innerHTML = place.name\r\n\t\r\n\t// console.log(place)\r\n\r\n\tlet lat = place.geometry.location.lat()\r\n\tlet lng = place.geometry.location.lng()\r\n\t\r\n\t// console.log(lat, lng)\r\n\r\n\tget(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&APPID=${apiKey}`)\r\n\t\t.then(parsed => {\r\n\r\n\t\t\trender(parsed)\r\n\r\n\t\t\t// console.log(parsed)\r\n\t\t})\r\n})\r\n\r\n"]}